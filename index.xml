<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>main on Danila Isaichev's Portfolio</title><link>https://danilaisaichev.github.io/</link><description>Recent content in main on Danila Isaichev's Portfolio</description><generator>Hugo -- gohugo.io</generator><language>ru</language><atom:link href="https://danilaisaichev.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Lab_Theme_1</title><link>https://danilaisaichev.github.io/serv_web_tech/lab1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/lab1/</guid><description>Моделирование взаимодействия «клиент-сервер» с помощью программы telnet и программы curl Подготовка данных для отправки запроса:
Данила:
%D0%94%D0%B0%D0%BD%D0%B8%D0%BB%D0%B0 Исайчев:
%D0%98%D1%81%D0%B0%D0%B9%D1%87%D0%B5%D0%B2 Отправка запроса с помощью telnet GET запрос:
Ответ на GET запрос:
POST запрос:
Ответ на POST запрос:
Отправка запроса с помощью cURL GET запрос:
Ответ на GET запрос:
POST запрос:
Ответ на POST запрос:
Создание простого веб-сервера на основе Node.js Пример ответа сервера:
{ &amp;#34;date&amp;#34;: &amp;#34;16.06.2021 18:07:23&amp;#34; }</description></item><item><title>lab12</title><link>https://danilaisaichev.github.io/comppract/lab12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab12/</guid><description>Результатом выполнения лабораторных работ №1 и №2 является данный сайт</description></item><item><title>Let's encrypt</title><link>https://danilaisaichev.github.io/pit/letsencrypt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/letsencrypt/</guid><description>Скринкаст:</description></item><item><title>openedu</title><link>https://danilaisaichev.github.io/web/openedu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/openedu/</guid><description/></item><item><title>Третий семестр</title><link>https://danilaisaichev.github.io/prog/prog3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/prog/prog3/</guid><description> Лабораторные работы за семестр
Самостоятельные работы за семестр</description></item><item><title>Четвёртый семестр</title><link>https://danilaisaichev.github.io/prog/prog4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/prog/prog4/</guid><description> Лабораторные работы 1-2 Лабораторная работы 3 Лабораторная работы 4 Лабораторные работы 5-6 Лабораторная работа 7 Лабораторная работа 8 Самостоятельные работы за семестр</description></item><item><title>Lab_Theme_2</title><link>https://danilaisaichev.github.io/serv_web_tech/lab2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/lab2/</guid><description>1. Развёртывание стека LAMP Часть I. Развёртывание PHP/FPM + NGINX Часть II 2. Разработка на PHP с помощью GD2 графического интерфейса визуализации данных, полученных с помощью сетевого интерфейса</description></item><item><title>lab34</title><link>https://danilaisaichev.github.io/comppract/lab34/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab34/</guid><description>Цель: Транспиляция с помощью Babel, развёртывание проекта на JavaScript, включающего модули.
Файл index.js до выполнения транспиляции: 16 |&amp;gt; Math.sqrt |&amp;gt; console.log Файл index.js после выполнения транспиляции: var _ref, _; _ref = (_ = 16, Math.sqrt(_)), console.log(_ref); Файл main.js до выполнения транспиляции: import moment from &amp;#39;moment&amp;#39;; import name from &amp;#39;./name&amp;#39;; console.log(name); console.log(moment.unix(&amp;#39;1500514362&amp;#39;).format(&amp;#39;DD.MM.YYYY HH:mm:ss&amp;#39;)); Файл main.js после выполнения транспиляции: &amp;#39;use strict&amp;#39;; var _moment = require(&amp;#39;moment&amp;#39;); var _moment2 = _interopRequireDefault(_moment); var _name = require(&amp;#39;.</description></item><item><title>rubles_to_dollars</title><link>https://danilaisaichev.github.io/web/rubles_to_dollars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/rubles_to_dollars/</guid><description> Курс доллара к рублю Ссылка на борд</description></item><item><title>Пятый семестр</title><link>https://danilaisaichev.github.io/prog/prog5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/prog/prog5/</guid><description> Лабораторная работа 1 Лабораторная работа 2 Лабораторная работа 3 Лабораторная работа 4 Лабораторная работа 5 Лабораторная работа 6 Лабораторная работа 7 Лабораторная работа 8 Лабораторная работа 9 Самостоятельные работы за семестр</description></item><item><title>Docker BPR (Build &amp; Push &amp; Run)</title><link>https://danilaisaichev.github.io/pit/dockerbpr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/dockerbpr/</guid><description> Ссылка на образ в Docker Hub</description></item><item><title>ISR_Theme_1</title><link>https://danilaisaichev.github.io/serv_web_tech/isr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/isr1/</guid><description>Реализован REST API для выполнения операций CRUD в базе данных MongoDB.
Приложение реализовано с использованием Express, bodyParser, Mongoose.
Реализованы следующие операции:
GET /products - получение списка продуктов
POST /products/new - добавление нового продукта
POST /products/update/:id - обновление информации о продукте по ID
POST /products/delete/:id - удаление информации о продукте по ID
При отправке запросов для добавления и обновления продукта информация о нём передаётся в теле POST-запроса.
Сервер возвращает ответ - статус выполнения операции в формате JSON.</description></item><item><title>lab1</title><link>https://danilaisaichev.github.io/web/lab1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/lab1/</guid><description>Представьте свои текущие знания в области HTML в виде набора тегов (правильно сформированного XML-документа)
Осуществите рефакторинг DTD для данного документа, уменьшив количество повторяющихся инструкций
XML-документ DTD Рассмотрите документ Статистика посещений страницы (https://kodaktor.ru/g/08092017_stats). Основываясь на нём, разработайте язык для описания посещений некоторого URL, т.е. создайте DTD и валидный документ XML-документ DTD Разработайте или сгенерируйте схему (XML Schema) для документа и осуществите её валидацию с помощью инструмента типа xmlvalidation.com XML-документ DTD Валидация документа:</description></item><item><title>lab56</title><link>https://danilaisaichev.github.io/comppract/lab56/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab56/</guid><description>Цель: Научиться выполнять сборку проекта с помощью webpack.
Инициализация проекта: Добавление webpack и webpack-cli: Добавление moment: package.json: index.js: Сборка: README.md: Результат: Вывод: В ходе выполнения работ были получены сборки проекта с помощью webpack.
Ссылка на репозиторий: Репозиторий с результатами выполнения лабораторных работ 5-6</description></item><item><title>Шестой семестр</title><link>https://danilaisaichev.github.io/prog/prog6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/prog/prog6/</guid><description> Лабораторные работы 1-2 Лабораторные работы 3-4 Лабораторная работа 5 Лабораторная работа 6 Самостоятельные работы за семестр</description></item><item><title>Docker-Compose First Look</title><link>https://danilaisaichev.github.io/pit/dockercompose/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/dockercompose/</guid><description>Скринкаст:</description></item><item><title>ISR_Theme_2</title><link>https://danilaisaichev.github.io/serv_web_tech/isr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/isr2/</guid><description>Приложение реализует API для выполнения арифметических операций.
Маршруты описаны в файле routes.yaml.
Контроллер реализован в файле CalcController.php.
Ответ сервера при выполнении запроса по маршруту /calc/add/2/3:
{ &amp;#34;result&amp;#34;: 5 } Ответ сервера при выполнении запроса по маршруту /calc/substract/5/7:
{ &amp;#34;result&amp;#34;: -2 } Ответ сервера при выполнении запроса по маршруту /calc/multiply/7/5:
{ &amp;#34;result&amp;#34;: 35 } Ответ сервера при выполнении запроса по маршруту /calc/divide/5/7:
{ &amp;#34;result&amp;#34;: 0.7142857142857143 }</description></item><item><title>ISR1</title><link>https://danilaisaichev.github.io/web/isr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr1/</guid><description>Рабочее пространство разработчика может состоять из следующих компонентов:
Браузер Google Chrome, Chromium, в т.ч. нестабильные версии для разработчиков ( https://www.google.com/intl/ru_ru/chrome/, https://www.chromium.org/ ) Браузеры Firefox, Edge, в т.ч. нестабильные версии для разработчиков Node.js (LTS и Current версии) Локальный веб-сервер XAMMP или аналогичный Система контроля версий Git (https://git-scm.com/) Редактор кода Visual Studio Code (https://code.visualstudio.com/) Утилита cURL Клиент telnet (для Windows - можно использовать PuTTY или стандартный клиент) SSH-клиент (для Windows - можно использовать PuTTY или PowerShell) Настройка Git: необходимо указать имя и адрес электронной почты:</description></item><item><title>lab78</title><link>https://danilaisaichev.github.io/comppract/lab78/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab78/</guid><description>Цель: Научиться создавать изображения с помощью JavaScript Canvas API и:
Создать страницу с логотипом, повёрнутым на 90 градусов против часовой стрелки, состоящим из: инициалов, записанных в стиле написания почтового индекса, и кривой Безье под ними.
Создать страницу, на которой полученный логотип будет использован, как фоновый узор.
Функция, отвечающая за создание Canvas&amp;rsquo;а: function makeCanvas(x, y) { const canvas = document.createElement(&amp;#39;canvas&amp;#39;), ctx = canvas.getContext(&amp;#39;2d&amp;#39;); canvas.setAttribute(&amp;#39;width&amp;#39;, x); canvas.setAttribute(&amp;#39;height&amp;#39;, y); return { canvas, ctx }; } Фрагмент кода, отвечающий за: создание нового Canvas’а;</description></item><item><title>Седьмой семестр</title><link>https://danilaisaichev.github.io/prog/prog7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/prog/prog7/</guid><description> Лабораторная работа 1 Лабораторная работа 2 Лабораторная работа 3 Лабораторная работа 4 Лабораторная работа 5 Лабораторная работа 6 Лабораторная работа 7 Лабораторная работа 8 Итоговая лабораторная работа</description></item><item><title>ISR_Theme_3</title><link>https://danilaisaichev.github.io/serv_web_tech/isr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/isr3/</guid><description>Для разработки базы данных на MongoDB можно использовать MongoDB Cloud.
Этапы разработки базы данных:
создание базы данных; создание коллекций; добавление данных. MongoDB не требует определения схемы документа, что позволяет вносить изменения в структуру документа при добавлении или редактировании данных.
Этапы создания базы данных в MongoDB Cloud:
создание организации (organization); создание проекта (project); создание кластера (cluster) и базы данных с помощью MongoDB Atlas; добавление данных с помощью MongoDB Atlas, MongoDB Compass или веб-приложения.</description></item><item><title>ISR2</title><link>https://danilaisaichev.github.io/web/isr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr2/</guid><description>Для управления зависимостями в проектах, разрабатываемых с помощью Node.js, используются менеджеры пакетов npm и yarn.
Менеджер пакетов npm входит в состав Node.js.
Для установки Yarn необходимо выполнить команду:
npm install yarn -g После её выполнения можно проверить установку Yarn путём выполнения команды для вывода установленной версии:
yarn -v</description></item><item><title>lab910</title><link>https://danilaisaichev.github.io/comppract/lab910/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab910/</guid><description> Отчёт о выполнении лабораторных работ 9-10 POST запрос с помощью telnet Ответ на POST запрос с помощью telnet GET запрос с помощью telnet Ответ на GET запрос с помощью telnet POST запрос с помощью curl Ответ на POST запрос с помощью curl GET запрос с помощью curl Ответ на GET запрос с помощью curl</description></item><item><title>LetsEncrypt &amp; Nginx Proxy</title><link>https://danilaisaichev.github.io/pit/letsencryptnginxproxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/letsencryptnginxproxy/</guid><description> docker-compose Получение сертификата для whoami: Получение сертификата для whoami2: Результат для whoami: Результат для whoami2:</description></item><item><title>ISR_Theme_4</title><link>https://danilaisaichev.github.io/serv_web_tech/isr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/isr4/</guid><description>Ghost.js можно установить с помощью Docker-контейнера.
Для установки контейнера необходимо выполнить команду:
docker pull ghost Для запуска Ghost необходимо выполнить команду:
docker run -d --name some-ghost -e url=http://localhost:3001 -p 3001:2368 ghost После этого Ghost будет доступен по адресу server_ip:3001.</description></item><item><title>ISR3</title><link>https://danilaisaichev.github.io/web/isr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr3/</guid><description>Данные JSON получены по адресу https://kodaktor.ru/j/users.
Данные считываются с помощью fetch. Модификация дерева DOM происходит путём вызова функции appendChild.
Код приложения (фрагмент script):
document.querySelector(&amp;#39;#btn&amp;#39;).onclick = async () =&amp;gt; { let response = await fetch(&amp;#39;https://kodaktor.ru/j/users&amp;#39;); data = await response.json(); data.users.forEach(user =&amp;gt; { let ul = document.querySelector(&amp;#39;#users&amp;#39;); let li = document.createElement(&amp;#39;li&amp;#39;); li.appendChild(document.createTextNode(user.login)); ul.appendChild(li); }); } Результат:
Get Data</description></item><item><title>lab1112</title><link>https://danilaisaichev.github.io/comppract/lab1112/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab1112/</guid><description>Цель: Создать приложение, получающее данные через форму, и кодирующее их в MD5 и SHA-1.
Создать приложение-калькулятор, получающее данные через форму, и выводящее результаты вычислений на той же странице.
1. Создание приложения, получающего данные через форму, и кодирующего их в MD5 и SHA-1. Код формы, собирающей данные для кодирования (фрагмент index.php): &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Lab 11&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;form action=&amp;#34;index.php&amp;#34; method=&amp;#34;POST&amp;#34; &amp;gt; Name &amp;lt;input id=&amp;#34;name&amp;#34; name=&amp;#34;name&amp;#34; value=&amp;#34;Anonimous&amp;#34; /&amp;gt; &amp;lt;br&amp;gt; E-mail: &amp;lt;input id=&amp;#34;email&amp;#34; name=&amp;#34;email&amp;#34; type=&amp;#34;email&amp;#34;/&amp;gt; &amp;lt;br&amp;gt; Password &amp;lt;input id=&amp;#34;pass&amp;#34; name=&amp;#34;pass&amp;#34; type=&amp;#34;password&amp;#34; /&amp;gt; &amp;lt;br&amp;gt; &amp;lt;input type=&amp;#34;submit&amp;#34;&amp;gt; &amp;lt;/form&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; Код, отвечающий за кодирование и вывод данных (фрагмент index.</description></item><item><title>Настройка подключения к виртуальной частной сети</title><link>https://danilaisaichev.github.io/pit/vpn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/vpn/</guid><description>Команды для настройки сервера: sudo apt update &amp;amp;&amp;amp; sudo apt upgrade -y sudo apt-get install \ ca-certificates \ curl \ gnupg \ lsb-release curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg echo \ &amp;#34;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) stable&amp;#34; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker run -t -i -p 8080:8080 --volumes-from $CID umputun/dockvpn serveconfig Результат:</description></item><item><title>ISR4</title><link>https://danilaisaichev.github.io/web/isr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr4/</guid><description>Настройка линтера eslint для Visual Studio Code:
Установка eslint npm install -D eslint Установка плагинов eslint npm install -D eslint-config-airbnb-base eslint-plugin-import Создание конфигурационного файла .eslintrc.yml extends: - &amp;#39;airbnb-base&amp;#39; env: node: true browser: true Установка плагина ESLint Исправление кода с учётом рекомендаций линтера:</description></item><item><title>lab1314</title><link>https://danilaisaichev.github.io/comppract/lab1314/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab1314/</guid><description>Отчёт по лабораторным работам 13 и 14 Цель: Создать журнал сообщений.
Создать модифицированную версию журнала сообщений с формой на Bootstrap.
Создать приложение «Книга отзывов» с использованием БД MySQL.
1. Создание журнала сообщений. Код, отвечающий за запись данных в файл (фрагмент index.php): if ($_SERVER[&amp;#39;REQUEST_METHOD&amp;#39;]===&amp;#39;POST&amp;#39;) { $r = htmlentities($_POST[&amp;#39;message&amp;#39;]) ?? &amp;#39;Пустое сообщение&amp;#39;; $f = fopen(&amp;#39;log.txt&amp;#39;, &amp;#39;a&amp;#39;); fwrite($f, $r); fwrite($f, &amp;#34;\n&amp;#34;); fclose($f); $f = &amp;#39;&amp;lt;style&amp;gt;.right {width: 60%; margin-left: 35%; zoom: 80%}&amp;lt;/style&amp;gt;&amp;#39;; $f .= &amp;#39;&amp;lt;div class=&amp;#34;right&amp;gt;&amp;lt;h2&amp;gt;Добавить ещё один отзыв&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;; echo &amp;#39;&amp;lt;h3 style=&amp;#34;color:green&amp;#34;&amp;gt;Данные успешно добавлены&amp;lt;/h3&amp;gt;&amp;#39;; } Код формы, собирающей данные (фрагмент index.</description></item><item><title>VSR_Theme_1</title><link>https://danilaisaichev.github.io/serv_web_tech/vsr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/vsr1/</guid><description>REST API REST (Representational State Transfer - передача состояния представления) — архитектурный стиль взаимодействия компонентов распределённого приложения в сети.
Ограничения для построения REST-приложений по Филдингу:
Модель клиент-сервер. Отсутствие состояния. Кэширование. Единообразие интерфейса. Слои. Код по требованию. Преимущества REST-приложений:
надёжность; производительность; масштабируемость; прозрачность системы взаимодействия; простота интерфейсов; портативность компонентов; лёгкость внесения изменений; способностью эволюционировать, приспосабливаясь к новым требованиям. PRC PRC (Remote Procedure Call - удалённый вызов процедур) — класс технологий, позволяющих программам вызывать функции или процедуры в другом адресном пространстве (на удалённых узлах, либо в независимой сторонней системе на том же узле).</description></item><item><title>Список провайдеров oAuth</title><link>https://danilaisaichev.github.io/pit/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/oauth/</guid><description> Название Ссылки на документацию и playground (если есть) Ссылки на модули и библиотеки Yandex https://yandex.ru/dev/id/doc/dg/oauth/concepts/about.html https://pkg.go.dev/golang.org/x/oauth2/yandex VK https://dev.vk.com/api/oauth-parameters https://pkg.go.dev/golang.org/x/oauth2/vk Mail.ru https://help.mail.ru/developers/oauth https://pkg.go.dev/golang.org/x/oauth2/mailru Google https://developers.google.cn/identity/protocols/oauth2 https://developers.google.com/oauthplayground/ https://github.com/googleapis/google-api-go-client https://pkg.go.dev/golang.org/x/oauth2/google Github https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps https://pkg.go.dev/golang.org/x/oauth2/github Odnoklassniki https://apiok.ru/ext/oauth/ https://pkg.go.dev/golang.org/x/oauth2/odnoklassnik</description></item><item><title>lab15</title><link>https://danilaisaichev.github.io/comppract/lab15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/lab15/</guid><description>Цель: Создать Express-приложение, которое по маршруту /add (GET) добавляет в коллекцию users в этой базе данных документ со следующими полями:
поле login состоит из слова herzen, знака @ и электронной почты, как она указана в Moodle (herzen@danila.isaichev@mail.ru);
поле password содержит число, переданное через сообщение в Moodle перед началом занятия (16).
Добавить маршрут /addfrompage, который работает аналогично предыдущему, но поле password содержит результат считывания содержимого со страницы http://kodaktor.ru/g/_unsafe/65e39.
Осуществить вставку, перейдя по маршруту /add.</description></item><item><title>VSR_Theme_2</title><link>https://danilaisaichev.github.io/serv_web_tech/vsr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/vsr2/</guid><description>PSR (PHP Standarts Recommendations) - это набор рекомендаций для PHP-разработчиков.
PSR-0 – Стандарт автозагрузки; PSR-1 – Базовый стандарт оформления кода; PSR-2 – Рекомендации по оформлению кода; PSR-3 – Интерфейс протоколирования; PSR-4 – Улучшенная автозагрузка. PSR-0: Autoloading Standard описывает обязательные требования, которых необходимо придерживаться для взаимодействия с автозагрузчиком. Стандарт устарел и заменён PSR-4.
PSR-4: Autoloading Standard описывает спецификацию автозагрузки классов из файлов. Он полностью совместим и может использоваться в дополнение к любому другому стандарту автозагрузки, включая PSR-0.</description></item><item><title>VSR1</title><link>https://danilaisaichev.github.io/web/vsr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr1/</guid><description>Валидация XML-документов позволяет проверить, что документ является синтаксически верным (правильно сформированным, well-formed) и валидным относительно определённой структуры (схемы).
Схема документа - DTD (Document Type Definition).
Проверка синтаксиса и валидация относительно DTD может быть произведена с помощью сервиса валидации W3C: https://validator.w3.org/.</description></item><item><title>Реализация дополнительной стратегии oAuth 2.0</title><link>https://danilaisaichev.github.io/pit/passportjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/pit/passportjs/</guid><description> Ссылка на репозиторий Скринкаст:</description></item><item><title>isr1</title><link>https://danilaisaichev.github.io/comppract/isr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/isr1/</guid><description>Создание проекта yarn init -y Добавление зависимостей yarn add -D babel-cli babel-preset-env Настройка Babel (файл .babelrc) {&amp;#34;presets&amp;#34;: [&amp;#34;env&amp;#34;]} Добавление библиотеки moment yarn add moment Команда транспиляции babel-node ./src/index.js Сборка проекта babel ./src -d ./lib Файлы main.js и name.js находятся в отношении нативной модульности.
Исходные файлы расположены в директории src, транспилированные - в директории res.
Ссылка на репозиторий</description></item><item><title>VSR_Theme_3</title><link>https://danilaisaichev.github.io/serv_web_tech/vsr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/serv_web_tech/vsr3/</guid><description>MongoDB — документоориентированная система управления базами данных, не требующая описания схемы таблиц. Считается одним из классических примеров NoSQL-систем, использует JSON-подобные документы и схему базы данных.
Apache Cassandra — распределённая система управления базами данных, относящаяся к классу NoSQL-систем и рассчитанная на создание высокомасштабируемых и надёжных хранилищ огромных массивов данных, представленных в виде хэша.
MongoDB Имеется поддержка индексов. Система может работать с набором реплик, то есть содержать две или более копии данных на различных узлах.</description></item><item><title>VSR2</title><link>https://danilaisaichev.github.io/web/vsr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr2/</guid><description>Функциональное программирование — парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).
Принципы функционального программирования:
чистые функции; иммутабельность; ссылочная прозрачность; функции как объекты первого класса; функции высшего порядка; рекурсия. Чистыми называют функции, которые не имеют побочных эффектов ввода-вывода и памяти (они зависят только от своих параметров и возвращают только свой результат). Чистые функции для одних и тех же аргументов возвращают одинаковый результат.</description></item><item><title>isr2</title><link>https://danilaisaichev.github.io/comppract/isr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/isr2/</guid><description/></item><item><title>VSR3</title><link>https://danilaisaichev.github.io/web/vsr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr3/</guid><description>Подбор палитры Выбрать другие цвета Количество цветов: Сценарий реализован с использованием библиотеки chroma.js. Шкала показывается от двух случайно выбранных цветов, которые генерируются с помощью метода chroma.random(). Для создания шкалы используется метод chroma.scale(colors).</description></item><item><title>isr3</title><link>https://danilaisaichev.github.io/comppract/isr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/isr3/</guid><description>Для разработки базы данных на MongoDB можно использовать MongoDB Cloud.
MongoDB не требует определения схемы документа, что позволяет вносить изменения в структуру документа при добавлении или редактировании данных.
Схема может иметь следующий вид:
{
name: String,
type: String,
amount: {
number: Number,
unit: String
}
} Реализован REST API для выполнения операций CRUD в базе данных MongoDB.
Приложение реализовано с использованием Express, bodyParser, Mongoose.
Реализованы следующие операции:
GET /products - получение списка продуктов</description></item><item><title>VSR4</title><link>https://danilaisaichev.github.io/web/vsr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr4/</guid><description>ESLint - это статический анализатор кода, который может находить синтаксические ошибки, баги и неточности форматирования.
Для работы ESLint необходимо установить Node.js и npm.
Настройка линтера eslint для Visual Studio Code:
Установка eslint npm install -D eslint Установка плагинов eslint npm install -D eslint-config-airbnb-base eslint-plugin-import Создание конфигурационного файла .eslintrc.yml extends: - &amp;#39;airbnb-base&amp;#39; env: node: true browser: true Установка плагина ESLint Исправление кода с учётом рекомендаций линтера:</description></item><item><title>vsr1</title><link>https://danilaisaichev.github.io/comppract/vsr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/vsr1/</guid><description>Инициализация проекта: Добавление webpack и webpack-cli: Добавление moment: package.json: index.js: Сборка: README.md: Результат:</description></item><item><title>vsr2</title><link>https://danilaisaichev.github.io/comppract/vsr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/vsr2/</guid><description>Серверная компонента приложения может представлять собой реализацию REST API для выполнения операций CRUD в базе данных MongoDB.
Приложение реализовано с использованием Express, bodyParser, Mongoose.
Реализованы следующие операции:
GET /products - получение списка продуктов
POST /products/new - добавление нового продукта
POST /products/update/:id - обновление информации о продукте по ID
POST /products/delete/:id - удаление информации о продукте по ID
При отправке запросов для добавления и обновления продукта информация о нём передаётся в теле POST-запроса.</description></item><item><title>vsr3</title><link>https://danilaisaichev.github.io/comppract/vsr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/vsr3/</guid><description>NoSQL — обозначение широкого класса разнородных систем управления базами данных, существенно отличающихся от традиционных реляционных СУБД с доступом к данным средствами языка SQL.
Традиционные СУБД ориентируются на требования ACID к транзакционной системе: атомарность, согласованность, изолированность, долговечность, тогда как в NoSQL вместо ACID может рассматриваться набор свойств BASE:
базовая доступность — каждый запрос гарантированно завершается (успешно или безуспешно); гибкое состояние — состояние системы может изменяться со временем, даже без ввода новых данных, для достижения согласования данных; согласованность в конечном счёте — данные могут быть некоторое время рассогласованы, но приходят к согласованию через некоторое время.</description></item><item><title>vsr4</title><link>https://danilaisaichev.github.io/comppract/vsr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/comppract/vsr4/</guid><description>Для развёртывания веб-ресурса на платформе vscale.io необходимо создать аккаунт.
После создания аккаунта необходимо создать сервер с готовым образом Docker:
После создания сервера необходимо подключиться к нему по SSH с использования логина и пароля или SSH-ключа.
Веб-ресурсом может являться сайт на CMS Ghost.js, которую можно установить с помощью Docker-контейнера.
Для установки контейнера необходимо выполнить команду:
docker pull ghost Для запуска Ghost необходимо выполнить команду:
docker run -d --name some-ghost -e url=http://localhost:3001 -p 3001:2368 ghost После этого Ghost будет доступен по адресу server_ip:3001.</description></item></channel></rss>