<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web on Danila Isaichev's Portfolio</title><link>https://danilaisaichev.github.io/web/</link><description>Recent content in web on Danila Isaichev's Portfolio</description><generator>Hugo -- gohugo.io</generator><language>ru</language><atom:link href="https://danilaisaichev.github.io/web/index.xml" rel="self" type="application/rss+xml"/><item><title>openedu</title><link>https://danilaisaichev.github.io/web/openedu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/openedu/</guid><description/></item><item><title>rubles_to_dollars</title><link>https://danilaisaichev.github.io/web/rubles_to_dollars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/rubles_to_dollars/</guid><description> Курс доллара к рублю Ссылка на борд</description></item><item><title>lab1</title><link>https://danilaisaichev.github.io/web/lab1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/lab1/</guid><description>Представьте свои текущие знания в области HTML в виде набора тегов (правильно сформированного XML-документа)
Осуществите рефакторинг DTD для данного документа, уменьшив количество повторяющихся инструкций
XML-документ DTD Рассмотрите документ Статистика посещений страницы (https://kodaktor.ru/g/08092017_stats). Основываясь на нём, разработайте язык для описания посещений некоторого URL, т.е. создайте DTD и валидный документ XML-документ DTD Разработайте или сгенерируйте схему (XML Schema) для документа и осуществите её валидацию с помощью инструмента типа xmlvalidation.com XML-документ DTD Валидация документа:</description></item><item><title>ISR1</title><link>https://danilaisaichev.github.io/web/isr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr1/</guid><description>Рабочее пространство разработчика может состоять из следующих компонентов:
Браузер Google Chrome, Chromium, в т.ч. нестабильные версии для разработчиков ( https://www.google.com/intl/ru_ru/chrome/, https://www.chromium.org/ ) Браузеры Firefox, Edge, в т.ч. нестабильные версии для разработчиков Node.js (LTS и Current версии) Локальный веб-сервер XAMMP или аналогичный Система контроля версий Git (https://git-scm.com/) Редактор кода Visual Studio Code (https://code.visualstudio.com/) Утилита cURL Клиент telnet (для Windows - можно использовать PuTTY или стандартный клиент) SSH-клиент (для Windows - можно использовать PuTTY или PowerShell) Настройка Git: необходимо указать имя и адрес электронной почты:</description></item><item><title>ISR2</title><link>https://danilaisaichev.github.io/web/isr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr2/</guid><description>Для управления зависимостями в проектах, разрабатываемых с помощью Node.js, используются менеджеры пакетов npm и yarn.
Менеджер пакетов npm входит в состав Node.js.
Для установки Yarn необходимо выполнить команду:
npm install yarn -g После её выполнения можно проверить установку Yarn путём выполнения команды для вывода установленной версии:
yarn -v</description></item><item><title>ISR3</title><link>https://danilaisaichev.github.io/web/isr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr3/</guid><description>Данные JSON получены по адресу https://kodaktor.ru/j/users.
Данные считываются с помощью fetch. Модификация дерева DOM происходит путём вызова функции appendChild.
Код приложения (фрагмент script):
document.querySelector(&amp;#39;#btn&amp;#39;).onclick = async () =&amp;gt; { let response = await fetch(&amp;#39;https://kodaktor.ru/j/users&amp;#39;); data = await response.json(); data.users.forEach(user =&amp;gt; { let ul = document.querySelector(&amp;#39;#users&amp;#39;); let li = document.createElement(&amp;#39;li&amp;#39;); li.appendChild(document.createTextNode(user.login)); ul.appendChild(li); }); } Результат:
{} Get Data</description></item><item><title>ISR4</title><link>https://danilaisaichev.github.io/web/isr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/isr4/</guid><description>Настройка линтера eslint для Visual Studio Code:
Установка eslint npm install -D eslint Установка плагинов eslint npm install -D eslint-config-airbnb-base eslint-plugin-import Создание конфигурационного файла .eslintrc.yml extends: - &amp;#39;airbnb-base&amp;#39; env: node: true browser: true Установка плагина ESLint Исправление кода с учётом рекомендаций линтера:</description></item><item><title>VSR1</title><link>https://danilaisaichev.github.io/web/vsr1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr1/</guid><description>Валидация XML-документов позволяет проверить, что документ является синтаксически верным (правильно сформированным, well-formed) и валидным относительно определённой структуры (схемы).
Схема документа - DTD (Document Type Definition).
Проверка синтаксиса и валидация относительно DTD может быть произведена с помощью сервиса валидации W3C: https://validator.w3.org/.</description></item><item><title>VSR2</title><link>https://danilaisaichev.github.io/web/vsr2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr2/</guid><description>Функциональное программирование — парадигма программирования, в которой процесс вычисления трактуется как вычисление значений функций в математическом понимании последних (в отличие от функций как подпрограмм в процедурном программировании).
Принципы функционального программирования:
чистые функции; иммутабельность; ссылочная прозрачность; функции как объекты первого класса; функции высшего порядка; рекурсия. Чистыми называют функции, которые не имеют побочных эффектов ввода-вывода и памяти (они зависят только от своих параметров и возвращают только свой результат). Чистые функции для одних и тех же аргументов возвращают одинаковый результат.</description></item><item><title>VSR3</title><link>https://danilaisaichev.github.io/web/vsr3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr3/</guid><description>Сценарий реализован с использованием библиотеки chroma.js. Шкала показывается от двух случайно выбранных цветов, которые генерируются с помощью метода chroma.random(). Для создания шкалы используется метод chroma.scale(colors).</description></item><item><title>VSR4</title><link>https://danilaisaichev.github.io/web/vsr4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://danilaisaichev.github.io/web/vsr4/</guid><description>ESLint - это статический анализатор кода, который может находить синтаксические ошибки, баги и неточности форматирования.
Для работы ESLint необходимо установить Node.js и npm.
Настройка линтера eslint для Visual Studio Code:
Установка eslint
npm install -D eslint Установка плагинов eslint
npm install -D eslint-config-airbnb-base eslint-plugin-import Создание конфигурационного файла .eslintrc.yml
extends: - &amp;#39;airbnb-base&amp;#39; env: node: true browser: true Установка плагина ESLint
Исправление кода с учётом рекомендаций линтера:</description></item></channel></rss>